SELECT 'Begin <?= $this->targetEntity->getTableName(); ?> offset <?= $this->offset; ?> rows <?= $this->limit; ?>' as '', now() as '';

DROP PROCEDURE IF EXISTS zf_doctrine_audit_epoch_<?= $this->targetEntity->getTableName(); ?>;

DELIMITER ;;
CREATE PROCEDURE zf_doctrine_audit_epoch_<?= $this->targetEntity->getTableName(); ?>()
BEGIN
    DECLARE done INT DEFAULT FALSE;

    DECLARE var_revision_entity_id bigint(20);

<?php
    foreach ($this->columns as $columnName => $columnType) {
?>
    DECLARE var_<?= $columnName; ?> <?= $columnType;?>;
<?php
    }
    ?>

    DECLARE cur CURSOR FOR SELECT
        `<?= implode("`,\n        `", array_keys($this->columns)); ?>`
        FROM <?= $this->targetDatabase; ?>.<?= $this->targetEntity->getTableName(); ?>
        LIMIT <?= $this->offset; ?>, <?= $this->limit; ?>;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    START TRANSACTION;
    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO
            var_<?= implode(",\n            var_", array_keys($this->columns)); ?>;

        IF done THEN
            LEAVE read_loop;
        END IF;

        SET var_revision_entity_id = <?= $this->targetDatabase; ?>.get_revision_entity_audit('<?= addslashes($this->targetEntity->getName()); ?>', 'epoch');

        INSERT INTO `<?= $this->targetEntity->getAuditEntity()->getTableName(); ?>` (
            `<?= implode("`,\n            `", array_keys($this->columns)); ?>`,
            `revisionEntity_id`
        ) SELECT
            <?php
            foreach ($this->columns as $columnName => $columnType) {
                switch ($columnType) {
                    case 'longtext':
                    case 'varchar(255)':
                        echo 'convert(var_' . $columnName . " using utf8),\n";
                        break;
                    default:
                        echo 'var_' . $columnName . ",\n";
                        break;

                }
            }
            ?>
            var_revision_entity_id;

    END LOOP read_loop;
    CLOSE cur;
    COMMIT;
END;;

DELIMITER ;
CALL zf_doctrine_audit_epoch_<?= $this->targetEntity->getTableName(); ?>();
SELECT <?= $this->targetDatabase; ?>.close_revision_audit(0, '', '', 'Epoch <?= $this->targetEntity->getTableName(); ?>') into @dummy;

DROP PROCEDURE IF EXISTS zf_doctrine_audit_epoch_<?= $this->targetEntity->getTableName(); ?>;
